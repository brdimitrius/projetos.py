import cv2
import numpy
from time import sleep
import rpyc
conn = rpyc.classic.connect('192.168.15.4')
conn.execute('#!/usr/bin/env python3')
#ev3 = conn.modules['ev3dev.ev3']
#conn.execute('import ev3dev.ev3 as ev3')
#PIL = conn.modules['PIL']
#os = conn.modules['os']
#sys = conn.modules['sys']
#subprocess = conn.modules['subprocess']
#conn.execute("m = ev3.LargeMotor('outA')")
#cv2 = conn.modules['cv2']
#numpy = conn.modules['numpy']
#video = cv2.VideoCapture(-1)
#print(video)
#rsys =
conn.execute('import cv2')
conn.execute('import numpy')
#except Exception as e:
 #   print(e)
 #   print("Error")
#try:
conn.execute('video = cv2.VideoCapture(0)')
conn.execute('video.set(3, 600)')
conn.execute('video.set(4, 400)')
conn.execute('start_height = 400 - 5')
conn.execute('x_last = 320')
conn.execute('y_last = 180')


##conn.execute('import math')
#conn.execute('#!/usr/bin/env python3')
#print(conn.eval('2*math.pi'))
#conn.execute('video = cv2.VideoCapture(0)')
##print(conn.eval('2*math.pi'))
##print(conn.eval('video'))
#conn.execute('sucessfullly, imagem = video.read()')
#imagem = conn.eval('imagem')
#print(conn.eval('imagem'))
#print(imagem)
while True:
    conn.execute('sucessfullly, imagem = video.read()')
    imagem = conn.eval('imagem')
    print(imagem)
    conn.execute('orig = (imagem.shape[1], imagem.shape[0])')
    #conn.execute('hsv = imagem')
    conn.execute('hsv = cv2.cvtColor(imagem, cv2.COLOR_RGB2HSV)')
    #conn.execute('bgr = imagem')
    #conn.execute('cortada2 = hsv[200:250, 0:639]')
    #bgr = cv2.cvtColor(imagem, cv2.COLOR_RGB2BGR)
#    conn.execute('ray = imagem
 #   gray = cv2.cvtColor(imagem, cv2.COLOR_RGB2GRAY)
    #conn.execute('cortada = bgr[200:250, 0:639]')
    conn.execute('linha_preta = cv2.inRange(imagem, (0, 0, 0), (36, 255, 53))')
    conn.execute('sinal_verde = cv2.inRange(imagem, (23, 120, 35), (60, 255, 255))')
    conn.execute('kernel = numpy.ones((3, 3), numpy.uint8)')
    conn.execute('linha_preta = cv2.erode(linha_preta, kernel, iterations=5)')
    conn.execute('linha_preta = cv2.dilate(linha_preta, kernel, iterations=9)')
    conn.execute('sinal_verde = cv2.erode(sinal_verde, kernel, iterations=5)')
    conn.execute('sinal_verde = cv2.erode(sinal_verde, kernel, iterations=9)')
    conn.execute('img_blk, contours_preto, hierarchy_blk = cv2.findContours(linha_preta.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)')
    conn.execute('img_grn, contours_verde, hierarchy_grn = cv2.findContours(sinal_verde.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)')    # print(contours_verde)
#    conn.execute('src_blur = cv2.GaussianBlur(gray, (3,3), 3)')
    conn.execute('Verde_detectado = False')
    conn.execute('if len(contours_verde) > 0:')
    conn.execute('Verde_detectado = False')
    conn.execute('if len(contours_verde) > 0:')
        conn.execute('Verde_detectado = True')
        conn.execute('x_verde, y_verde, w_verde, h_verde = cv2.boundingRect(contours_verde[0])')
        conn.execute('pt = (x_verde, y_verde + h_verde)')
        conn.execute('dist = math.sqrt((pt[0] - orig[0]) ** 2 + (pt[1] - orig[1]) ** 2)')
#        conn.execute('print(dist)')
        # print(contours_verde[0])
        conn.execute('centerx_verde0 = x_verde + (w_verde / 2)')
        # print(centerx_verde0)
        conn.execute('centerx_verde = (int(centerx_verde0))')
        #cv2.line(cortada, (centerx_verde, 200), (centerx_verde, 250), (0, 255, 0), 3)
        conn.execute('setpoint2 = 320')
        conn.execute('error2 = int(x_verde - setpoint2)')
        conn.execute('error22 = abs(error2)')
#        conn.execute('print("Error : ", error22)
        #print("Angulo verde: ", error2)
        #print("Angulo verde: ", error2)
        # cv2.putText(image, ("Posicao verde (%s)" % (error2)), (30, 400), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0),2)
    conn.execute('contours_preto_len = len(contours_preto)')
    conn.execute('if contours_preto_len > 0:')
        conn.execute('if contours_preto_len == 1:')
            conn.execute('area_preta = cv2.minAreaRect(contours_preto[0])')
        conn.execute('else:')
            conn.execute('candidatos = []')
            conn.execute('botao_off = 0')
            conn.execute('for con_num in range(contours_preto_len):')
                conn.execute('area_preta = cv2.minAreaRect(contours_preto[con_num])')
                conn.execute('(x_minimo, y_minimo), (w_minimo, h_minimo), angulo = area_preta')
                conn.execute('box = cv2.boxPoints(area_preta)')
                conn.execute('(x_box, y_box) = box[0]')
                conn.execute('x_preto, y_preto, w_preto, h_preto = cv2.boundingRect(contours_preto[0])')
                conn.execute('pt2 = (x_minimo, y_minimo + h_minimo)')
                conn.execute('dist2 = math.sqrt((pt2[0] - orig[0]) ** 2 + (pt2[1] - orig[1]) ** 2)')
                conn.execute('centerx_preto0 = x_preto + (w_preto / 2)')
                conn.execute('dist2 = int(dist2)')
                conn.execute('dist2 = str(dist2)')
                conn.execute('cv2.putText(imagem, dist2, (10, 320), cv2.FONT_HERSHEY_SIMPLEX, 1,(0, 255, 0), 2)')
                conn.execute('centerx_preto = (int(centerx_preto0))')
                # print(centerx_preto)
                conn.execute('if y_box > 358:')
                    conn.execute('botao_off += 1')
                conn.execute('candidatos.append((y_box, con_num, x_minimo, y_minimo))')
            conn.execute('candidatos = sorted(candidatos)')
            conn.execute('if botao_off > 1:')
                conn.execute('candidatos_botao_off = []')
                conn.execute('for con_num in range((contours_preto_len - botao_off), contours_preto_len):')
                    conn.execute('(y_maior, con_maior, x_minimo, y_minimo) = candidatos[con_num]')
                    conn.execute('distancia_total = (abs(x_minimo - x_last) ** 2 + abs(y_minimo - y_last) ** 2) ** 0.5')
                    conn.execute('candidatos_botao_off.append((distancia_total, con_maior))')
                conn.execute('candidatos_botao_off = sorted(candidatos_botao_off)')
                conn.execute('(distancia_total, con_maior) = candidatos_botao_off[0]')
                conn.execute('area_preta = cv2.minAreaRect(contours_preto[con_maior])')
            conn.execute('else:')
                conn.execute('(y_maior, con_maior, x_minimo, y_minimo) = candidatos[contours_preto_len - 1]')
                conn.execute('area_preta = cv2.minAreaRect(contours_preto[con_maior])')
        conn.execute('(x_minimo, y_minimo), (w_minimo, h_minimo), angulo = area_preta')
        conn.execute('x_last = x_minimo')
        conn.execute('y_last = y_minimo')
        conn.execute('if angulo < -45:')
            conn.execute('angulo = 90 + angulo')
            conn.execute('angulo2 = int(angulo)')
        conn.execute('if w_minimo < h_minimo and angulo > 0:')
            conn.execute('angulo = (90 - angulo) * -1')
            conn.execute('angulo2 = int(angulo)')
        conn.execute('if w_minimo > h_minimo and angulo < 0:')
            conn.execute('angulo = 90 + angulo')
            conn.execute('angulo2 = int(angulo)')
        conn.execute('setpoint = 320')
        conn.execute('error = int(x_minimo - setpoint)')
        conn.execute('angulo = int(angulo)')
        conn.execute('box = cv2.boxPoints(area_preta)')

        conn.execute('box = numpy.int0(box)')
        conn.execute('Preto = True')
        conn.execute('ag = box.flat[0]')
        #cv2.circle(imagem, (ag, 200), 10, (153, 51, 153), 3)
        conn.execute('cv2.drawContours(imagem, [box], 0, (0, 0, 255), 3)')
        cv2.putText(imagem, str(angulo), (10, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)')
        conn.execute('print("Angulo : ", angulo)')
        conn.execute('if angulo == 0:')
            m.run_forever(speed_sp=200)
            #n.run_forever(speed_sp=200)
            #conn.execute('print("Reto")
        conn.execute('if angulo > 0:')
            print("Direita")
            #conn.execute('print("Direita")
            #n.run_forever(speed_sp=200)  # \ _ S
        conn.execute('if angulo < 0:')
            conn.execute('print("Esquerda")
            #m.run_forever(speed_sp=200)
        conn.execute('cv2.line(imagem, (int(x_minimo), 200), (int(x_minimo), 250), (211, 0, 148), 3)')
        #cv2.line(imagem, (centerx_preto, 200), (centerx_preto, 250), (255, 0, 0), 3)
        conn.execute('x_pretum, y_pretum, w_pretum, h_pretum = cv2.boundingRect(contours_preto[0])')
        conn.execute('setpoint_pretum = 320')
        conn.execute('error_pretum = int(x_pretum - setpoint_pretum)')
        conn.execute('if Preto == True:')
            conn.execute('print("")')
    conn.execute('angulo = int(angulo)')
    conn.execute('box = cv2.boxPoints(area_preta)')
    conn.execute('box = numpy.int0(box)')
    conn.execute('ag = box.flat[0]')
    #print("AG", ag)
    #print("X pretum :", x_pretum) ## # AG = Valor da area preto
#    print("AG ", ag)
    #print(sys.argv[1])
    #print(int((ag - 320)))
 #   sys.argv
    #conn.execute('if ag >= 100 and x_pretum >= ag and Verde_detectado == False or ag >= 100 and x_pretum <= ag and Verde_detectado == False:  # \
        #m.run_forever(speed_sp=100) #  \ _ S
        #n.run_forever(speed_sp=100) #  /
        #print("Siga reto")  # /
     #   conn.execute('Preto = True
    #cv2.drawContours(imagem, [box], 0, (0, 0, 255), 3)
    #            cv2.putText(image, str(angulo), (10, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
    #cv2.putText(imagem, ("Posicao preta (%s)" % (error_pretum)), (10, 320), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)
    #conn.execute('if Preto == True:
     #   conn.execute('print("")
    #if error_pretum == 0:
        #m.run_forever(speed_sp=100)
        #n.run_forever(speed_sp=100)
     #   print("Reto")
    #elif error_pretum > 0:
        #n.run_to_rel_pos(position_sp=valor_angulo, speed_sp=100, stop_action="hold")
     #   print("Direita")
    #elif error_pretum < 0:
        #valor_angulo = error_pretum
        #m.run_to_rel_pos(position_sp=valor_angulo, speed_sp=100, stop_action="hold")
     #   print("esquerda")
    conn.execute('if Verde_detectado == True:')
        conn.execute('if dist > 500:')
            conn.execute('Esquerda = False')
            conn.execute('Direita = True')
            #n.run_to_rel_pos(position_sp=360, speed_sp=1000, stop_action="hold")
            print("Direita")
            conn.execute('cv2.putText(imagem, "Vire a esquerda", (350, 180), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0), 3)')
        conn.execute('elif dist < 500:')
            conn.execute('Esquerda = True')
            conn.execute('Direita = False')
            #m.run_to_rel_pos(position_sp=360, speed_sp=1000, stop_action="hold")
            print("Esquerda")
            conn.execute('cv2.putText(imagem, "Vire a direia", (50, 180), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0), 3)')
            # elif len(contours_verde) == 0 and len(contours_preto) == 0
            #else:
            #setpoint = 320
            #      # Apenas mostrar a camera se estiver algo
            # if re:
            #   print("Imagem OK")
            #       #cv2.imshow("video output", img)
            #  # se nao tiver nada, abotar
            #print("Erro lendo camera")
            ## sleep(10)
            #sys.exit()
        # else:
        #   print( "Erro lendo camera")
        #  k = cv2.waitKey(10) & 0xFF
        # if k == 27:
        #    sys.exit()


#cv2.imshow("Oi", imagem)
#print(imagem)
#print(type(imagem))
#sucessfully, imagem = video.read()
#ab =  conn.eval('
##print(conn.eval('sucessfullly'))
#print("Con ex ", type(imagem_print))
#print(iagem_print)
#except xception as f:
 #   print(f)
  #  print("Error F")
#sleep(10)
#while True:
 #   sucessfullly, imagem = video.read()
  #  print(imagem)
#conn.execute('m.run_timed(time_sp=1000, speed_sp=600)')
